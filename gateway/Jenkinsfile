pipeline {
    agent any
    
    environment {
        IMAGE_NAME = 'inventory-rs-gateway'
        NEXUS_URL = 'http://192.168.0.37:8081/repository/maven-snapshots/'
        NEXUS_REPOSITORY = 'maven-snapshots'
        NEXUS_CREDENTIALS_ID = 'nexus-credentials-id'
        DOCKERFILE_PATH = 'gateway/Dockerfile'
        DEPLOY_REPO_URL = 'https://github.com/ss5924/inventory-rs-deploy.git'
        DOCKER_REGISTRY = '192.168.0.37:5000'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/ss5924/inventory-rs-gateway.git'
            }
        }

        stage('Deploy') {
            steps {
                script {
                    docker.image('jdk21-maven:latest').inside {
                        configFileProvider([configFile(fileId: 'f2b40b8d-923d-408c-9ce6-04d63234aafb', variable: 'MAVEN_SETTINGS')]) {
                            withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                sh """
                                mvn clean deploy -Dmaven.test.skip=true \
                                -s ${MAVEN_SETTINGS} \
                                -DaltDeploymentRepository=${NEXUS_REPOSITORY}::default::${NEXUS_URL}
                                """
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    dir('deploy-repo') {
                        git branch: 'master', url: "${DEPLOY_REPO_URL}"
                    }
                    
                    docker.withRegistry("http://${DOCKER_REGISTRY}") {
                        def dockerfilePath = "${WORKSPACE}/deploy-repo/${DOCKERFILE_PATH}"
                        if (!fileExists(dockerfilePath)) {
                            error "Dockerfile not found at ${dockerfilePath}"
                        }
                        def image = docker.build("${IMAGE_NAME}", "-f ${dockerfilePath} .")
                        image.push()
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }

        success {
            echo 'Build completed successfully!'
        }

        failure {
            echo 'Build failed. Check the logs for details.'
        }
    }
}
